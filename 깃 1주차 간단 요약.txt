향후 일정
- 10월 14(월), 10월 21(월) : 스터디 x
- 10월 28(월) 부터 : 스터디 o

이번주 스터디 과제
- 기한 : 10월 13일(일) 오후 11시 59분까지
- 과제 : 개인별 깃허브 리포지토리에 최소 하나 이상 push 하기
- 깃허브 : https://github.com/likelionknut/git-group-study-test


이번주 깃 요약
(빠진 것이 있을 수 있습니다.)
(깃허브 자체에 대한 내용 생략)

- git init
자기자신의 컴퓨터에 깃 저장소를 처음 생성할 때

- git remote add origin https://github.com/likelionknut/git-group-study-test.git
자기 자신 컴퓨터(로컬)에 원격(깃허브) 저장소를 등록하는 과정
처음에 한번만 실행하면 됨

- origin
원격(깃허브) 저장소의 별칭(별명)

- git remote -v
자기 자신 컴퓨터(로컬)에 원격(깃허브) 저장소가 어떤 것이 등록되어 있는지 확인할 때

- git clone https://github.com/likelionknut/git-group-study-test.git
다른 사람들이 만든 원격(깃허브)저장소를 복제해온다
이 경우 거기에 포함된 커밋 내역을 그대로 가져옴
하고 나서 ls (파일 목록 확인)를 입력하면 git-group-study-test라는 폴더가 하나 생성된 것을 확인할 수 있다.
cd git-group-study-test/ 를 하고나서(그 폴더로 이동하는 명령어) .git 폴더가 있는지 확인하고 깃을 이용하면 된다

- git add 파일이름1
파일이름1을 stage 영역에 등록
즉 commit하기 전에 파일이름1을 등록하는 과정

- git status
깃이 관리하고 있는 파일 중 현재 어떤 변화가 일어났는지 확인
파일이 새로 추가되거나 파일 내용에 변화가 있을 경우(git add를 하지 않은 파일이면) 빨간색으로 표현됨
그러나 git add를 한 파일이면 초록색으로 표현됨

- git commit -m "커밋메시지"
git add를 한 파일에 한해 대해 커밋하는 과정
커밋메시지는 다른 사람들이 보기에 알아보기 쉽게 작성하는 것이 좋다

- git log
커밋 내역을 확인

- git push origin master
깃허브에 올리는 과정

- git pull origin master
깃은 커밋 내역(9dc690c0684343e69f258eb9a8fd11804f6e9d39 같은 것들)를 기준으로 파일을 관리함
자기 자신 컴퓨터(로컬)의 커밋 내역과 원격(깃허브) 커밋 내역을 비교하여 원격(깃허브)의 커밋 내역을 가져옴

즉 로컬과 원격의 내용을 비교하여 원격의 내용을 가져올 때 사용
(그 과정에서 가져오고 합치는 과정이 포함된다)
좀 더 공부하고 싶으면 git fetch와 git merge에 대해 공부해도 됨
이를 공부하면 git pull = git fetch(가져오기) + git merge(합병)

예1)
자기 자신 컴퓨터(로컬)의 커밋 내역
22222
11111

깃허브의 커밋 내역
33333
22222
11111

깃허브의 커밋 내역이 로컬의 커밋 내역과 똑같은데 33333만 추가된 상태
git pull origin master를 하면 33333의 커밋 내역을 가져옴

예2)
자기 자신 컴퓨터(로컬)의 커밋 내역
22222
11111

깃허브의 커밋 내역
33333
11111

깃허브의 커밋 내역과 로컬의 커밋 내역이 다른 상태
git pull origin master를 하면 Merge branch 'master' 어쩌고하면서 vscode가 뜨거나 vim 창이 뜬다
vscode라면 저장하고 vscode 창을 닫으면 된다
vim 창이면 :wq를 입력한다

다른 상황도 있을 수 있지만 일단 이정도만 하면 기본적인 협업은 가능합니다.
